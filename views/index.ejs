<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Autenticación - Login & Registro</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
      }

      .container {
        background: white;
        border-radius: 20px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        width: 100%;
        max-width: 400px;
        position: relative;
      }

      .form-container {
        padding: 40px;
      }

      .form-toggle {
        display: flex;
        margin-bottom: 30px;
      }

      .toggle-btn {
        flex: 1;
        padding: 12px;
        background: #f8f9fa;
        border: none;
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        transition: all 0.3s ease;
        color: #6c757d;
      }

      .toggle-btn.active {
        background: #667eea;
        color: white;
      }

      .toggle-btn:first-child {
        border-radius: 10px 0 0 10px;
      }

      .toggle-btn:last-child {
        border-radius: 0 10px 10px 0;
      }

      .form {
        display: none;
      }

      .form.active {
        display: block;
      }

      .form-group {
        margin-bottom: 20px;
      }

      .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #333;
      }

      .form-group input {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        font-size: 16px;
        transition: border-color 0.3s ease;
        outline: none;
      }

      .form-group input:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      }

      .form-group input.error {
        border-color: #dc3545;
      }

      .error-message {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
        display: none;
      }

      .error-message.show {
        display: block;
      }

      .submit-btn {
        width: 100%;
        padding: 14px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 10px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.2s ease;
      }

      .submit-btn:hover {
        transform: translateY(-2px);
      }

      .submit-btn:active {
        transform: translateY(0);
      }

      .form-title {
        text-align: center;
        margin-bottom: 30px;
        color: #333;
        font-size: 24px;
        font-weight: 700;
      }

      .success-message {
        background: #d4edda;
        color: #155724;
        padding: 12px;
        border-radius: 10px;
        margin-bottom: 20px;
        display: none;
      }

      .success-message.show {
        display: block;
      }

      .general-error {
        background: #f8d7da;
        color: #721c24;
        padding: 12px;
        border-radius: 10px;
        margin-bottom: 20px;
        display: none;
      }

      .general-error.show {
        display: block;
      }

      /* User Info Styles */
      .user-info {
        text-align: center;
      }

      .user-details {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 30px;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 15px;
      }

      .user-avatar {
        font-size: 48px;
        margin-right: 15px;
        background: #667eea;
        color: white;
        width: 70px;
        height: 70px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .user-text {
        text-align: left;
      }

      .user-greeting {
        display: block;
        font-size: 16px;
        color: #6c757d;
        margin-bottom: 5px;
      }

      .username-display {
        display: block;
        font-size: 24px;
        font-weight: 700;
        color: #333;
      }

      .user-actions {
        display: flex;
        flex-direction: column;
        gap: 15px;
      }

      .action-btn {
        padding: 14px 20px;
        border: none;
        border-radius: 10px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .action-btn.primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
      }

      .action-btn.primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
      }

      .action-btn.secondary {
        background: #f8f9fa;
        color: #6c757d;
        border: 2px solid #e9ecef;
      }

      .action-btn.secondary:hover {
        background: #e9ecef;
        color: #495057;
      }

      @media (max-width: 480px) {
        .container {
          margin: 10px;
        }

        .form-container {
          padding: 30px 20px;
        }

        .user-details {
          flex-direction: column;
          text-align: center;
        }

        .user-avatar {
          margin-right: 0;
          margin-bottom: 15px;
        }

        .user-text {
          text-align: center;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="form-container">
        <!-- User Info (shown when logged in) -->
        <div id="userInfo" class="user-info" style="display: none">
          <div class="user-welcome">
            <h2 class="form-title">¡Bienvenido!</h2>
            <div class="user-details">
              <div class="user-avatar">👤</div>
              <div class="user-text">
                <span class="user-greeting">Hola,</span>
                <span class="username-display" id="usernameDisplay"></span>
              </div>
            </div>
            <div class="user-actions">
              <button
                type="button"
                class="action-btn primary"
                id="goToProtected"
              >
                Ir a Área Protegida
              </button>
              <button type="button" class="action-btn secondary" id="logoutBtn">
                Cerrar Sesión
              </button>
            </div>
          </div>
        </div>

        <!-- Auth Forms (shown when not logged in) -->
        <div id="authForms">
          <!-- Toggle Buttons -->
          <div class="form-toggle">
            <button type="button" class="toggle-btn active" id="loginToggle">
              Iniciar Sesión
            </button>
            <button type="button" class="toggle-btn" id="registerToggle">
              Registrarse
            </button>
          </div>

          <!-- Success/Error Messages -->
          <div id="successMessage" class="success-message"></div>
          <div id="errorMessage" class="general-error"></div>

          <!-- Login Form -->
          <div id="loginForm" class="form active">
            <h2 class="form-title">Bienvenido de nuevo</h2>
            <form id="loginFormElement" action="/login" method="POST">
              <div class="form-group">
                <label for="loginUsername">Nombre de usuario</label>
                <input
                  type="text"
                  id="loginUsername"
                  name="username"
                  required
                />
                <div class="error-message" id="loginUsernameError"></div>
              </div>
              <div class="form-group">
                <label for="loginPassword">Contraseña</label>
                <input
                  type="password"
                  id="loginPassword"
                  name="password"
                  required
                />
                <div class="error-message" id="loginPasswordError"></div>
              </div>
              <button type="submit" class="submit-btn">Iniciar Sesión</button>
            </form>
          </div>

          <!-- Register Form -->
          <div id="registerForm" class="form">
            <h2 class="form-title">Crear cuenta nueva</h2>
            <form id="registerFormElement" action="/register" method="POST">
              <div class="form-group">
                <label for="registerUsername">Nombre de usuario</label>
                <input
                  type="text"
                  id="registerUsername"
                  name="username"
                  required
                />
                <div class="error-message" id="registerUsernameError"></div>
              </div>
              <div class="form-group">
                <label for="registerPassword">Contraseña</label>
                <input
                  type="password"
                  id="registerPassword"
                  name="password"
                  required
                />
                <div class="error-message" id="registerPasswordError"></div>
              </div>
              <div class="form-group">
                <label for="confirmPassword">Confirmar contraseña</label>
                <input
                  type="password"
                  id="confirmPassword"
                  name="confirmPassword"
                  required
                />
                <div class="error-message" id="confirmPasswordError"></div>
              </div>
              <button type="submit" class="submit-btn">Crear Cuenta</button>
            </form>
          </div>
        </div>
        <!-- Close authForms -->
      </div>
    </div>

    <script>
      // Get user data from server-side rendering
      const userData = <%- JSON.stringify(user || null) %>;

      // Check if user is logged in on page load
      window.addEventListener('DOMContentLoaded', () => {
        if (userData && userData.username) {
          showUserInfo(userData.username)
        } else {
          showAuthForms()
        }

        // Configurar renovación automática de tokens
        setupTokenRefresh()
      })

      // Función para renovar token automáticamente
      async function refreshAccessToken() {
        try {
          const response = await fetch('/refresh-token', {
            method: 'POST',
            credentials: 'include'
          })

          if (response.ok) {
            const data = await response.json()
            console.log('Token renovado automáticamente')
            return true
          } else {
            console.log('No se pudo renovar el token')
            return false
          }
        } catch (error) {
          console.log('Error renovando token:', error)
          return false
        }
      }

      // Configurar renovación automática cada 10 minutos
      function setupTokenRefresh() {
        if (userData && userData.username) {
          setInterval(async () => {
            const renewed = await refreshAccessToken()
            if (!renewed) {
              // Si no se pudo renovar, redirigir al login
              showAuthForms()
              showGeneralError('Sesión expirada. Por favor, inicia sesión nuevamente.')
            }
          }, 10 * 60 * 1000) // 10 minutos
        }
      }

      // Función para hacer peticiones con renovación automática
      async function fetchWithTokenRefresh(url, options = {}) {
        let response = await fetch(url, {
          ...options,
          credentials: 'include'
        })

        // Si el token expiró (401), intentar renovarlo
        if (response.status === 401) {
          const renewed = await refreshAccessToken()
          if (renewed) {
            // Reintentar la petición original
            response = await fetch(url, {
              ...options,
              credentials: 'include'
            })
          }
        }

        return response
      }

      // Show user info when logged in
      function showUserInfo(username) {
        document.getElementById('userInfo').style.display = 'block'
        document.getElementById('authForms').style.display = 'none'
        document.getElementById('usernameDisplay').textContent = username
      }

      // Show auth forms when not logged in
      function showAuthForms() {
        document.getElementById('userInfo').style.display = 'none'
        document.getElementById('authForms').style.display = 'block'
      }

      // Logout functionality
      document
        .getElementById('logoutBtn')
        .addEventListener('click', async () => {
          try {
            const response = await fetchWithTokenRefresh('/logout', {
              method: 'POST'
            })

            if (response.ok) {
              showSuccess('Sesión cerrada exitosamente')
              setTimeout(() => {
                window.location.reload() // Recargar la página para mostrar los formularios
              }, 1500)
            } else {
              showGeneralError('Error al cerrar sesión')
            }
          } catch (error) {
            showGeneralError('Error de conexión')
          }
        })

      // Go to protected area
      document.getElementById('goToProtected').addEventListener('click', () => {
        window.location.href = '/protected'
      })

      // Toggle para cambiar entre formularios
      const loginToggle = document.getElementById('loginToggle')
      const registerToggle = document.getElementById('registerToggle')
      const loginForm = document.getElementById('loginForm')
      const registerForm = document.getElementById('registerForm')

      loginToggle.addEventListener('click', () => {
        loginToggle.classList.add('active')
        registerToggle.classList.remove('active')
        loginForm.classList.add('active')
        registerForm.classList.remove('active')
        clearMessages()
      })

      registerToggle.addEventListener('click', () => {
        registerToggle.classList.add('active')
        loginToggle.classList.remove('active')
        registerForm.classList.add('active')
        loginForm.classList.remove('active')
        clearMessages()
      })

      // Limpiar mensajes de error y éxito
      function clearMessages() {
        document.querySelectorAll('.error-message').forEach((el) => {
          el.classList.remove('show')
          el.textContent = ''
        })
        document.querySelectorAll('.form-group input').forEach((input) => {
          input.classList.remove('error')
        })
        document.getElementById('successMessage').classList.remove('show')
        document.getElementById('errorMessage').classList.remove('show')
      }

      // Mostrar mensaje de error específico
      function showError(inputId, message) {
        const input = document.getElementById(inputId)
        const errorDiv = document.getElementById(inputId + 'Error')
        input.classList.add('error')
        errorDiv.textContent = message
        errorDiv.classList.add('show')
      }

      // Mostrar mensaje de error general
      function showGeneralError(message) {
        const errorDiv = document.getElementById('errorMessage')
        errorDiv.textContent = message
        errorDiv.classList.add('show')
      }

      // Mostrar mensaje de éxito
      function showSuccess(message) {
        const successDiv = document.getElementById('successMessage')
        successDiv.textContent = message
        successDiv.classList.add('show')
      }

      // Validación de formularios
      function validateForm(formType) {
        clearMessages()
        let isValid = true

        if (formType === 'register') {
          const username = document.getElementById('registerUsername').value
          const password = document.getElementById('registerPassword').value
          const confirmPassword =
            document.getElementById('confirmPassword').value

          // Username validation
          if (username.length < 3) {
            showError(
              'registerUsername',
              'El nombre de usuario debe tener al menos 3 caracteres'
            )
            isValid = false
          }

          // Password validation
          if (password.length < 6) {
            showError(
              'registerPassword',
              'La contraseña debe tener al menos 6 caracteres'
            )
            isValid = false
          }

          // Confirm password validation
          if (password !== confirmPassword) {
            showError('confirmPassword', 'Las contraseñas no coinciden')
            isValid = false
          }
        } else if (formType === 'login') {
          const username = document.getElementById('loginUsername').value
          const password = document.getElementById('loginPassword').value

          if (!username.trim()) {
            showError('loginUsername', 'El nombre de usuario es requerido')
            isValid = false
          }

          if (!password.trim()) {
            showError('loginPassword', 'La contraseña es requerida')
            isValid = false
          }
        }

        return isValid
      }

      // Handlers para el envío de formularios
      document
        .getElementById('loginFormElement')
        .addEventListener('submit', async (e) => {
          e.preventDefault()

          if (!validateForm('login')) {
            return
          }

          const formData = new FormData(e.target)
          const data = Object.fromEntries(formData)

          try {
            const response = await fetchWithTokenRefresh('/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data),
            })

            const result = await response.json()

            if (response.ok) {
              showSuccess('¡Inicio de sesión exitoso! Redirigiendo...')
              setTimeout(() => {
                window.location.reload() // Recargar la página para que se actualice con el usuario logueado
              }, 1500)
            } else {
              showGeneralError(result.message || 'Error al iniciar sesión')
            }
          } catch (error) {
            showGeneralError('Error de conexión. Inténtalo de nuevo.')
          }
        })

      document
        .getElementById('registerFormElement')
        .addEventListener('submit', async (e) => {
          e.preventDefault()

          if (!validateForm('register')) {
            return
          }

          const formData = new FormData(e.target)
          const data = Object.fromEntries(formData)

          // Eliminar confirmPassword del objeto de datos antes de enviarlo
          delete data.confirmPassword

          try {
            const response = await fetchWithTokenRefresh('/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data),
            })

            const result = await response.json()

            if (response.ok) {
              showSuccess(
                '¡Cuenta creada exitosamente! Puedes iniciar sesión ahora.'
              )
              // Cambiar a formulario de inicio de sesión
              setTimeout(() => {
                loginToggle.click()
                document.getElementById('loginUsername').value = data.username
              }, 1500)
            } else {
              showGeneralError(result.message || 'Error al crear la cuenta')
            }
          } catch (error) {
            showGeneralError('Error de conexión. Inténtalo de nuevo.')
          }
        })

      // Validación en tiempo real
      document
        .getElementById('confirmPassword')
        .addEventListener('input', (e) => {
          const password = document.getElementById('registerPassword').value
          const confirmPassword = e.target.value

          if (confirmPassword && password !== confirmPassword) {
            showError('confirmPassword', 'Las contraseñas no coinciden')
          } else {
            document
              .getElementById('confirmPasswordError')
              .classList.remove('show')
            e.target.classList.remove('error')
          }
        })
    </script>
  </body>
</html>
